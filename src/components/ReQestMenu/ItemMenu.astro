<!-----

structure, I wont question

<div id="Ribbon-Listing">
        <div class="menu-item" data-index="NS1 outstanding cadet"> !-- BTW data-index is the Name that Shows to the User --
        <img src="https://raw.githubusercontent.com/Parlier-NJROTC/Assets/main/Ribbon/naval_science_i_outstanding_cadet_ribbon.png"
        alt="Image 1">
    <div class="overlay-text">Box 1</div>
</div>



--- -->



<span>
    <div id="ribbon-listings">

    </div>
    <div id="taskbar" class="BottomBox">
        <button id="Button" class="saul-signature-style" style="width:44px;margin-top: 30px;" >X</button>
        <div class="carousel-controls" style="margin-top: 30px;">
            <button id="prevBtn">&lt;</button>
                    <div class="carousel-container">
                        <a href="#RibbonListing">
                            <div class="carousel-item active">Ribbons</div>
                        </a>
                        <a href="#StarListing">
                            <div class="carousel-item">Stars</div>
                        </a>
                        <div class="carousel-item">Item 3</div>
                    </div>
            <button id="nextBtn">&gt;</button>
        </div>
        <p id="selectionCount" class="saul-signature-style"style="margin-top: 30px;">Items: 0 / 28</p>
        <button id="clearSelectionBtn" class="saul-signature-style"style="margin-top: 30px;">Clear Selection</button>
    </div>
</span>

<script>
console.log("no error? I guess typescript now works in astro")
let x:number = 5
console.log(x)

import ribbons from "./ribbons.json"

let ribbons_Selected = 0
let ribbons_count = 0
const MAX_SELECTIONS = 15;

function loadSavedSelections() {
    try {
        const savedSelections = JSON.parse(localStorage.getItem('selectedItems') || '[]');
        savedSelections.forEach((ribbonName: string) => {
            const ribbonBox = document.querySelector(`[data-name="${ribbonName}"]`) as HTMLElement | null;
            if (ribbonBox && ribbonBox instanceof HTMLElement) {
                ribbonBox.style.backgroundColor = "rgb(27, 165, 211)";
                ribbons_Selected++;
            }
        });
    } catch (error) {
        console.error("Error loading saved selections:", error);
    }
}

document.getElementById('clearSelectionBtn')!.addEventListener('click', clearSelections);

function clearSelections() {
    const selectedItems: never[] = []; // THis is not a Error
    const ribbonBoxes = document.querySelectorAll('.a-ribbon-listing');

    ribbonBoxes.forEach(box => {
        box.style.backgroundColor = 'lightblue'; // THis is not a Error
        box.dataset.selected = 'false'; // THis is not a Error
    });

    ribbons_Selected = 0;
    updateSelectionCount();

    localStorage.setItem('selectedItems', JSON.stringify(selectedItems)); // THis is not a Error
}

function createRibbonBox(i: string): HTMLElement {
    const box = document.createElement("div");
    box.dataset.name = i;
    box.className = "a-ribbon-listing";

    const ribbon = document.createElement("img");
    ribbon.src = `/Dashboard/ribbons/${i}.png`;
    box.appendChild(ribbon);

    const ribbon_name = document.createElement("span");
    ribbon_name.innerText = i;
    box.appendChild(ribbon_name);

    box.onclick = () => {
        const isSelected = box.style.backgroundColor === "rgb(27, 165, 211)";

        if (!isSelected && ribbons_Selected >= MAX_SELECTIONS) {
            alert('You cannot select more than 15 Items.');
            return;
        }

        box.style.backgroundColor = isSelected ? "lightblue" : "rgb(27, 165, 211)";
        ribbons_Selected += isSelected ? -1 : 1;

        const selectedItems = Array.from(document.querySelectorAll<HTMLElement>('.a-ribbon-listing'))
        .filter(item => item.style.backgroundColor === "rgb(27, 165, 211)")
        .map(item => item.dataset.name);
    localStorage.setItem('selectedItems', JSON.stringify(selectedItems));

    updateSelectionCount();
};

    return box;
}


function updateSelectionCount() {
    const selectionCountElement = document.getElementById("selectionCount");
    if (selectionCountElement) {
        selectionCountElement.innerText = `Items: ${ribbons_Selected} / 15`;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    for (let i in ribbons) {
        ribbons_count++;

        const box = createRibbonBox(i);
        document.getElementById("ribbon-listings")?.appendChild(box);
    }

    loadSavedSelections();
    updateSelectionCount();
});
</script>

<script lang="js">
    document.addEventListener('DOMContentLoaded', function () {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const carouselContainer = document.querySelector('.carousel-container');
    const carouselItems = document.querySelectorAll('.carousel-item');

document.getElementById('Button').addEventListener('click', function () {
    const astroComponent = document.querySelector('.astro-component');
    astroComponent.style.display = astroComponent.style.display = 'none';
});
let currentIndex = 0;

    function updateCarousel(index) {
        carouselItems.forEach((item, i) => {
            item.style.display = i === index ? 'flex' : 'none';
        });
    }
        // Carousel THing
        
        // scoll
        prevBtn.addEventListener('click', () => {
            currentIndex = (currentIndex - 1 + carouselItems.length) % carouselItems.length;
            updateCarousel(currentIndex);
        });

        nextBtn.addEventListener('click', () => {
            currentIndex = (currentIndex + 1) % carouselItems.length;
            updateCarousel(currentIndex);
        });

        document.addEventListener('keydown', (event) => {
    if (event.key === ',') {
        currentIndex = (currentIndex - 1 + carouselItems.length) % carouselItems.length;
        updateCarousel(currentIndex);
    }
});
        document.addEventListener('keydown', (event) => {
    if (event.key === '.') {
        currentIndex = (currentIndex + 1) % carouselItems.length;
        updateCarousel(currentIndex);
    }
});

        updateCarousel(currentIndex);
    ;

   // cool Active thjing
    carouselContainer.addEventListener('mousedown', function () {
        this.classList.add('active-perspective');
    });
    document.addEventListener('mouseup', function () {
        carouselContainer.classList.remove('active-perspective');
    });
    });
</script>

<style is:inline>
    .a-ribbon-listing{
        padding: 15px;
        background-color: lightblue;
        text-align: center;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 5px solid lightblue;
        transition: cubic-bezier(0.25, 0.1, 0, 1.4) 250ms;

        width:120px;

        display:flex;
        flex-direction: column;
        text-align: center;
        justify-content: center;
        align-items: center;

        transition: 100ms;

        margin:10px;
    }
    .a-ribbon-listing span{
    }
    #ribbon-listings{
        overflow-y: scroll;
        grid: "Ribbons";

        background-color: tan;
        border-radius: 10px;

        display: flex;

        flex-direction: row;
        flex-wrap: wrap;

        justify-content: space-around;
    }
    img{
        filter: invert(var(--img-invert));
    }
</style>

<!-- DO NOT ADD IS:INLINE TO STYLE TAG, is cursed as heccc -->

<style>
    #taskbar{
        grid:"Taskbar";

        display: flex;

        flex-direction: row;

        align-items: center;
        justify-content: space-between;

        border-top: 5px double black;

        margin:5px;
        margin-block:15px;
    }
    

    .saul-signature-style{
        font-family: "Sanchez";

        display: flex;

        align-items: center;
        justify-content: center;

        padding-inline:15px;

        margin:10px;

        height: 44px;
        min-height: 44px;
        max-height: 44px;

        border: 3px solid black;
        background-color: white;
    }
    @keyframes fadeOut {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
    span {
        position: absolute;
        top: 0px;
        left: 0%;
        background-color: wheat;
        border: double 15px black;
        padding: 10px;
        color: rgb(0, 0, 0);
        font-size: 16px;
        width: 80%;
        height: 80%;

        display: grid;
        grid-template-areas:
        "Ribbons"
        "Taskbar"
        ;
        grid-template-rows: auto 100px;

        box-shadow: 10px 20px 20px black;
    }
    .carousel-controls {
        display: flex;
        justify-content: center;
        align-items: stretch;
        width: 15%;
        margin: 0 auto;
        position: relative;
    }

    #prevBtn,
    #nextBtn {
        background: none;
        border: none;
        font-size: 20px;

        transition: cubic-bezier(0, 2.39, 1, 1) 250ms;
    }

    #prevBtn:active {
        transform: translate(-20px, 0%);
        transform: scale(2, 1);
    }

    #nextBtn:active {
        transform: translate(20px, 0%);
        transform: scale(2, 1);

    }

    .carousel-container {
        position: relative;
        flex-grow: 1;
        height: 50px;
        margin: 0 10px;

        background: white;
        border-radius: 5px;
        padding: -15px;
        border: 5px double black;
        transition: ease-in-out 250ms;
        background-clip: padding-box;
    }
    a{
        color: #000;
        text-decoration: none;
    }

    .carousel-container:hover {
        border-radius: 0px;
        background: whitesmoke;
        background-clip: padding-box;
    }

    .carousel-item {
        flex-shrink: 0;
        width: 100%;
        height: 100%;
        display: none;
        justify-content: center;
        align-items: center;
        font-size: 18px;
    }
</style>